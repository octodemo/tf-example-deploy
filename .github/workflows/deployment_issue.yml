name: Demo Issue Form Opened

on:
  issues:
    types:
      - opened
      - reopened

jobs:
  extract_request:
    name: Extract demo request
    if: |
      contains(github.event.issue.labels.*.name, 'deployment')
      && github.event.issue.assignee.login == 'octodemobot'

    runs-on: ubuntu-22.04

    outputs:
      container_image: ${{ steps.issue_payload.outputs.container_image }}
      container_image_tag: ${{ steps.issue_payload.outputs.container_image_tag }}
      environment_name: ${{ steps.issue_payload.outputs.environment_name }}

    steps:
      - name: Extract Form Template Data
        id: issue_payload
        uses: peter-murray/issue-forms-body-parser@v3
        with:
          separator: "###"
          issue_id: ${{ github.event.issue.number }}
          label_marker_start: ">>>"
          label_marker_end: "<<<"

      - name: Process the payload data
        id: processed_data
        uses: actions/github-script@v6
        env:
          payload_data: ${{ steps.issue_payload.outputs.payload }}
        with:
          script: |
            const data = process.env.payload_data;

            try {
              const parsedData = JSON.parse(data);

              const environment = parsedData.environment;
              const container = `octodemo/${parsedData['container-name']}`
              const version = parsedData.version;

              core.setOutput('container_image', container);
              core.setOutput('container_image_tag', version);
              core.setOutput('environment_name', environment);

              core.summary.addHeading(':green_circle: Deployment Request', 3);
              const rows = [
                ['environment_name', environment],
                ['container_image', container],
                ['container_image_tag', version]
              ];
              core.summary.addTable(rows);
              await core.summary.write()
            } catch(err) {
              core.setFailed(`Issue parsing payload data; ${err}`);
            }

  invoke_deployment:
    name: Invoke deployment workflow

    runs-on: ubuntu-22.04

    needs:
      - extract_request

    steps:
      - name: Get Workflow Temporary Token
        id: temp_token
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ secrets.OCTODEMOBOT_APPLICATION_ID_REPO_AUTOMATION }}
          application_private_key: ${{ secrets.OCTODEMOBOT_APPLICATION_KEY_REPO_AUTOMATION }}

      - name: Invoke deployment workflow
        uses: actions/github-script@v6
        env:
          container_image: ${{ needs.extract_request.outputs.container_image }}
          container_image_version: ${{ needs.extract_request.outputs.container_image_version }}
          environment_name: ${{ needs.extract_request.outputs.environment_name }}
        with:
          github-token: ${{ steps.temp_token.outputs.token }}
          script: |
            const workflow = '.github/workflows/terraform_deployment.yml';
            const workflowBranchRef = 'main';
            const actor = context.actor; // The person on the issue
            const workflowInputs = {
              environment_name: process.env.environment_name,
              container: process.env.container_image,
              container_tag: process.env.container_tag,
              requesting_actor: actor,
              tracking_issue: context.issue.number,
            };

            core.startGroup('Workflow Dispatch');
            core.info(`Attempting to invoke workflow: ${workflow}`);
            core.info(`  target repository: ${context.repo.owner}/${context.repo.repo}`);
            core.info(`  workflow inputs:\n${JSON.stringify(workflowInputs, null, 2)}`);

            const result = await github.rest.actions.createWorkflowDispatch({
              ...context.repo,
              workflow_id: workflow,
              ref: workflowBranchRef,
              inputs: workflowInputs,
            });

            core.info(`  invocation result:\n${JSON.stringify(result, null, 2)}`);
            core.endGroup();


  update_issue:
    name: Update tracking issue
    if: always()

    # Ignore failures on this as the demo creation has already been invoked
    continue-on-error: true

    runs-on: ubuntu-22.04

    needs:
      - extract_request
      - invoke_deployment

    steps:
      - name: Provide success issue comment
        if: ${{ needs.invoke_deployment.result == 'success' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Deployment to environment started...

      - name: Provide failure/cancelled issue comment
        if: ${{ needs.invoke_deployment.result != 'success' }}
        uses: peter-evans/create-or-update-comment@v2
        env:
          workflow_run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            :exclamation: Deployment to environment unsuccessful :boom:

            | Actions Run |
            | ----------- |
            | [Logs](${{ env.workflow_run }}) |
